[{"/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/index.js":"1","/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/App.js":"2","/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/reportWebVitals.js":"3","/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/components/Field/Field.js":"4","/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/components/Sector/Sector.js":"5","/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/components/Panel/Panel.js":"6"},{"size":500,"mtime":1610309775693,"results":"7","hashOfConfig":"8"},{"size":889,"mtime":1621450275728,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610309775693,"results":"10","hashOfConfig":"8"},{"size":1431,"mtime":1621804006482,"results":"11","hashOfConfig":"8"},{"size":1146,"mtime":1621804647824,"results":"12","hashOfConfig":"8"},{"size":6803,"mtime":1621795647355,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ol9jzg",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/index.js",[],["28","29"],"/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/App.js",[],"/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/reportWebVitals.js",[],"/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/components/Field/Field.js",[],"/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/components/Sector/Sector.js",["30","31"],"/Users/Alexey_Zyuzin/CodeLearn/evolution-lena-front/src/components/Panel/Panel.js",["32"],"import { useCallback, useMemo, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport './style.css';\n\nconst apiPath = ''; // http://v296823.hosted-by-vdsina.ru:5000/\nconst regPath = 'user';\nconst authPath = 'auth/login';\nconst logoutPath = 'auth/logout';\n\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\n\nfunction getUserId() {\n  return getCookie('user_id');\n}\n\nconst startUserId = getUserId();\n\nfunction Panel() {\n  const [isAuthorized, setIsAuthorized] = useState(!!startUserId);\n  const userId = useMemo(getUserId, [isAuthorized]);\n  const [isError, setIsError] = useState(false);\n  const [login, setLogin] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = function(event) {\n    setLogin(event.target.value);\n  };\n  const handlePassword = function(event) {\n    setPassword(event.target.value);\n  };\n\n  const formData = useMemo(() => {\n    let fData = new FormData();\n    fData.append('login', login);\n    fData.append('psw', password);\n    return fData;\n  }, [login, password]);\n\n  const postAuth = useCallback(() => {\n    fetch( apiPath + authPath, {\n      method: 'POST',\n      body: formData,\n    })\n      .then(response => response.json())\n      .then((data) => {\n        console.log(' auth success> ', data);\n        setIsAuthorized(true);\n        setIsError(false);\n      })\n      .catch((err) => {\n        console.log(' auth error> ', err);\n        setIsError(true);\n      });\n  }, [formData]);\n\n  const handleSendForm = (e) => {\n    e.preventDefault();\n    postAuth();\n  };\n\n  const logout = useCallback(() => {\n    fetch( apiPath + logoutPath, {\n      method: 'POST',\n    })\n      .then((data) => {\n        console.log(' logout success> ', data);\n        setIsAuthorized(false);\n        setIsError(false);\n      })\n      .catch((err) => {\n        console.log(' logout error> ', err);\n        setIsError(true);\n      });\n  }, []);\n\n  const [regName, setRegName] = useState('');\n  const [regLogin, setRegLogin] = useState('');\n  const [regPassword, setRegPassword] = useState('');\n  const [regEmail, setRegEmail] = useState('');\n\n  const handleRegLogin = function(event) {\n    setRegLogin(event.target.value);\n  };\n  const handleRegPassword = function(event) {\n    setRegPassword(event.target.value);\n  };\n  const handleRegEmail = function(event) {\n    setRegEmail(event.target.value);\n  };\n  const handleRegName = function(event) {\n    setRegName(event.target.value);\n  };\n\n  const regFormData = useMemo(() => {\n    let fData = new FormData();\n    fData.append('name', regName);\n    fData.append('email', regEmail);\n    fData.append('login', regLogin);\n    fData.append('psw', regPassword);\n    return fData;\n  }, [login, password]);\n\n  const postRegistration = useCallback(() => {\n    fetch( apiPath + regPath, {\n      method: 'POST',\n      body: regFormData,\n    })\n      .then(response => response.json())\n      .then((data) => {\n        console.log(' reg success> ', data);\n        setShowRegistration(false);\n        setIsError(false);\n      })\n      .catch((err) => {\n        console.log(' reg error> ', err);\n        setIsError(true);\n      });\n  }, [regFormData]);\n\n  const handleRegForm = (e) => {\n    e.preventDefault();\n    postRegistration();\n  };\n\n  const [showRegistration, setShowRegistration] = useState(false);\n\n  return (\n    <div className={'panel' + (isError ? ' panel_error' : '')}>\n      <div class=\"panel__login-block\">\n        {\n          !!isAuthorized && (\n            <div className=\"panel__links\">\n              UserId: {userId}\n              {' :: '}\n              <Button\n                onClick={logout}\n                color=\"secondary\"\n                variant=\"outlined\"\n              >\n                Logout\n              </Button>\n            </div>\n          )\n        }\n        {\n          !isAuthorized && (\n            <div className=\"panel__links\">\n              <form onSubmit={handleSendForm} className=\"panel__form\">\n                <input type=\"text\" placeholder=\"login\" onChange={handleLogin} />\n                {' '}\n                <input type=\"password\" placeholder=\"password\" onChange={handlePassword} />\n                {' '}\n                <Button\n                  onClick={postAuth}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                >\n                  Login\n                </Button>\n              </form>\n              {' '}\n\n              <Button\n                onClick={() => { setShowRegistration(true)}}\n                color=\"secondary\"\n                variant=\"outlined\"\n              >\n                Register\n              </Button>\n            </div>\n          )\n        }\n      </div>\n      <div class=\"panel__control-block\">\n        {\n          !!isAuthorized && (\n              <div className=\"panel__links\">\n                <Button\n                  onClick={() => { console.log('click select sector')}}\n                  color=\"secondary\"\n                  variant=\"outlined\"\n                >\n                  Select sector\n                </Button>\n\n              </div>\n            )\n          }\n      </div>\n        {\n          !!showRegistration && (\n            <Dialog\n              open={showRegistration}\n              onClose={() => { setShowRegistration(false) }}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogContent>\n                <form onSubmit={handleRegForm} className=\"popup__form\">\n                  <label>Name:</label>\n                  <input type=\"text\" placeholder=\"name\" onChange={handleRegName} />\n                  <br/>\n                  <label>usename:</label>\n                  <input type=\"text\" placeholder=\"login\" onChange={handleRegLogin} />\n                  <br/>\n                  <label>password:</label>\n                  <input type=\"password\" placeholder=\"password\" onChange={handleRegPassword} />\n                  <br/>\n                  <label>email:</label>\n                  <input type=\"text\" placeholder=\"email\" onChange={handleRegEmail} />\n                  <br/>\n                  <input type=\"submit\" value=\"Request registration\" onClick={postRegistration} />\n                </form>\n\n                <Button\n                  onClick={() => { setShowRegistration(false) }}\n                  color=\"secondary\"\n                  variant=\"outlined\"\n                >\n                  Close\n                </Button>\n              </DialogContent>\n\n            </Dialog>\n          )\n        }\n    </div>\n  );\n}\n\nexport default Panel;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":7,"nodeType":"39","messageId":"40","endLine":2,"endColumn":16},{"ruleId":"37","severity":1,"message":"41","line":3,"column":7,"nodeType":"39","messageId":"40","endLine":3,"endColumn":16},{"ruleId":"42","severity":1,"message":"43","line":108,"column":6,"nodeType":"44","endLine":108,"endColumn":23,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'zoomHight' is assigned a value but never used.","Identifier","unusedVar","'zoomWidth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'regEmail', 'regLogin', 'regName', and 'regPassword'. Either include them or remove the dependency array.","ArrayExpression",["48"],"no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [regEmail, regLogin, regName, regPassword]",{"range":"51","text":"52"},[2924,2941],"[regEmail, regLogin, regName, regPassword]"]